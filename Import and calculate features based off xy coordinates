### Master Script for Analysis####

### Load Packages
{
  library("SciViews")
  library("markovchain")
  library("pracma")
  library("expm")
  library("diagram")
  library("devtools")
  #library("flowcatchR")
  library("gganimate")
  library("ggpubr")
  library("rstatix")
  library("multcomp")
  library(magick)
  library("viridis")    
  library(transformr)
  library(openxlsx)
  library(tidyverse)
  library(janitor)
  library(readxl)
  library(reshape2)
  library(ggplot2)
  library("gridExtra")
  library(openxlsx)
  library(depmixS4)
  options(java.parameters = "-Xmx8g")
  library("viridis")    
  library(tidyverse)
  library(janitor)
  library(readxl)
  library(reshape2)
  library(ggplot2)
  library(ggpointdensity)
  library(mclust)
  #library(rhdf5)
  library(openxlsx)
  library(data.table)
  library(gdata)
  library(ggpubr)
  library(skimr)
  library(ggstatsplot)
  library(mclust)
  library("xlsx")
  library(depmixS4)
  library(qdapRegex)
  library(dplyr)
  library(cycleRtools)
  library("sur")
  library(ranger)
  library(boot)
  library(zoo)
  library(scales)
  library(spm)
  library(caret)
}

###Set Seed for reproduciblity
set.seed(123)

####Groups for analysis
merged.wrmt.final= NULL
numbers <-function(x)(as.numeric(x)) ##Use to convert characters to numbers for xy coords
n= 10
Nth.delete<-function(dataframe, n)dataframe[-(seq(n,to=nrow(dataframe),by=n)),] ## Use to randomly remove rows for RF training

####Import the data for both controls and predicted data points 
# Choose folder with files, change pattern to relfect file type
### Choose Folder for Mac
choose.dir <- function() {
  system("osascript -e 'tell app \"R\" to POSIX path of (choose folder with prompt \"Choose Folder:\")' > /tmp/R_folder",
         intern = FALSE, ignore.stderr = TRUE)
  p <- system("cat /tmp/R_folder && rm -f /tmp/R_folder", intern = TRUE)
  return(ifelse(length(p), p, NA))
}

filename <- choose.dir()

if(is.na(filename)) stop("No folder", call. = F)

#Import Data
files.wrmt<- list.files(filename , pattern = ".xlsx", full.names = TRUE) %>%
  set_names()

#Ground Truth Group
merged.wrmt.GT= map_dfr(files.wrmt, read_excel,col_types = "text", .id = "file.ID") %>% na.omit() %>%
  mutate_at(c("x","y", "timebin","animalNumber"),numbers)

#Prediction Group
merged.wrmt.Pred= map_dfr(files.wrmt,read_excel,col_types = "text", .id = "file.ID")

merged.wrmt.Pred.Final= merged.wrmt.Pred %>% mutate_if(is.character, ~replace(., is.na(.), 0)) %>% 
  filter(`Eye L.State`==0) ##Convert NA to zero so you can filter out RF training data

### Extract all the info and categorize the data, change the ex_between function when choosing dif folders
### To extrac properly be sure to name files like this "(Sex of animal)(plate number)(mutants,leave blank if WT)(food size used)_(Date of recording YYYY-MM-DD)
### Example of Wildtype Male recorded on a small patch of food, on the second plate of batch of recorded plates on Dec 1 1999
### Male2SF_1999-12-1.(filetype)

# Ground Truth 
{
  coolio.3.GT= as.data.frame(merged.wrmt.GT)
  Worm.test.GT = coolio.3.GT %>%
    mutate(file= qdapRegex::ex_between(file.ID,"ALL/", "x")) %>% # change to reflect the path before the file name to the file type
    mutate(worm_ID = paste0(animalNumber,".",file)) %>%
    mutate(file= qdapRegex::ex_between(file.ID,"ALL/", "_")) %>%
    mutate(plateNumber = case_when(grepl(10, file) ~ 10,
                                   grepl(11, file) ~ 11,
                                   grepl(12, file) ~ 12,
                                   grepl(13, file) ~ 13,
                                   grepl(14, file) ~ 14,
                                   grepl(15, file) ~ 15,
                                   grepl(16, file) ~ 16,
                                   grepl(17, file) ~ 17,
                                   grepl(18, file) ~ 18,
                                   grepl(19, file) ~ 19,
                                   grepl(20, file) ~ 20,
                                   grepl(21, file) ~ 21,
                                   grepl(22, file) ~ 22,
                                   grepl(23, file) ~ 23,
                                   grepl(24, file) ~ 24,
                                   grepl(25, file) ~ 25,
                                   grepl(26, file) ~ 26,
                                   grepl(1, file) ~ 1,
                                   grepl(2, file) ~ 2,
                                   grepl(3, file) ~ 3,
                                   grepl(4, file) ~ 4,
                                   grepl(5, file) ~ 5,
                                   grepl(6, file) ~ 6,
                                   grepl(7, file) ~ 7,
                                   grepl(8, file) ~ 8,
                                   grepl(9, file) ~ 9)) %>%
    mutate(Sex = case_when(grepl('Male', file) ~ 'Male',
                           grepl('Herm', file) ~ 'Herm')) %>%
    mutate(food = case_when(grepl('BF', file) ~ 'Big Food',
                            grepl('SF', file) ~ 'Small Food')) %>%
    mutate(geno = case_when(grepl("OsmTra",file) ~ 'Osm-5::Tra-2',
                            grepl("FFPP",file) ~ 'PPdfr',
                            grepl("Tph", file) ~ 'Tph',
                            grepl("TPH", file) ~ 'Tph',
                            grepl("Pdfr", file) ~ 'Pdfr',
                            grepl("PDFR", file) ~ 'Pdfr',
                            grepl('Cat2',file) ~ 'Cat2',
                            grepl('Cat',file) ~ 'Cat2',
                            grepl('NTs',file) ~ 'Him5',
                            grepl('P',file) ~ 'Him5',
                            TRUE~ 'Him5')) %>%
    mutate(pheromone = case_when(grepl('Ascr', file) ~ 'Ascr#3',
                                 grepl('Ctrl', file) ~ 'Control',
                                 TRUE~ 'None')) %>% 
    mutate(spread = case_when(grepl('Dot', file) ~ 'Dot',
                              grepl('Even', file) ~ 'Even'
    )) %>% 
    mutate(Sex_Reverse = case_when(grepl('Fem', file) ~ 'Feminine',
                                   grepl('Masc', file) ~ 'Masculine',
                                   TRUE ~ 'WT'
    )) %>%
    mutate(WPP = case_when(grepl('Single', file) ~ 'Single',
                           TRUE ~ 'Multi'
    )) %>%
    mutate(Date= qdapRegex::ex_between(worm_ID,"_", ".")) %>%
    
    mutate(group = case_when(Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & pheromone=='Ascr#3' & spread =='Dot' ~ 'HermAscrDot',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & pheromone=='Ascr#3' & spread =='Dot' ~ 'MaleAscrDot',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & pheromone=='Ascr#3' & spread =='Even' ~ 'HermAscrEven',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & pheromone=='Ascr#3' & spread =='Even' ~ 'MaleAscrEven',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & pheromone=='Control' & spread =='Dot' ~ 'HermCtrlDot',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & pheromone=='Control' & spread =='Dot' ~ 'MaleCtrlDot',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & pheromone=='Control' & spread =='Even' ~ 'HermCtrlEven',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & pheromone=='Control' & spread =='Even' ~ 'MaleCtrlEven',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & Sex_Reverse== 'Feminine' ~ 'HermFem',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & Sex_Reverse== 'Masculine' ~ 'HermMasc',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & Sex_Reverse== 'Feminine' ~ 'MaleFem',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & Sex_Reverse== 'Masculine' ~ 'MaleMasc',
                             Sex == 'Herm' & geno == 'Him5' & Sex_Reverse== 'Feminine' ~ 'HermFem',
                             Sex == 'Herm' & geno == 'Him5' & Sex_Reverse== 'Masculine' ~ 'HermMasc',
                             Sex == 'Male' & geno == 'Him5' & Sex_Reverse== 'Feminine' ~ 'MaleFem',
                             Sex == 'Male' & geno == 'Him5' & Sex_Reverse== 'Masculine' ~ 'MaleMasc',
                             Sex == 'Herm' & food == 'Big Food' & geno == 'Him5' ~ 'HermFoodNBF',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' ~ 'HermFoodNSF',
                             #Sex == 'Herm' & geno == 'Him5' ~ 'HermFoodNSF',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & WPP=='Multi' ~ 'HermFoodNSF',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & WPP=='Single' ~ 'HermSingle',
                             Sex == 'Male' & food == 'Big Food' & geno == 'Him5' ~ 'MaleFoodNBF',
                             #Sex == 'Male' & food == 'Small Food' & geno == 'Him5' ~ 'MaleFoodNSF',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & WPP=='Multi' ~ 'MaleFoodNSF',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & WPP=='Single' ~ 'MaleSingle',
                             Sex == 'Male' & geno == 'Him5' ~ 'MaleFoodNSF',
                             Sex == 'Herm' & food == 'Big Food' & geno == 'Tph' ~ 'HermTph',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Tph' ~ 'HermTph',
                             Sex == 'Male' & food == 'Big Food' & geno == 'Tph' ~ 'MaleTph',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Tph' ~ 'MaleTph',
                             Sex == 'Herm' & food == 'Big Food' & geno == 'Pdfr' ~ 'HermPdfr',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Pdfr' ~ 'HermPdfr',
                             Sex == 'Male' & food == 'Big Food' & geno == 'Pdfr' ~ 'MalePdfr',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Pdfr' ~ 'MalePdfr',
                             Sex == 'Herm' & food == 'Big Food' & geno == 'Cat2' ~ 'HermCat2',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Cat2' ~ 'HermCat2',
                             Sex == 'Male' & food == 'Big Food' & geno == 'Cat2' ~ 'MaleCat2',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Cat2' ~ 'MaleCat2',
                             Sex == 'Male' & food == 'Small Food' & geno == 'PPdfr' ~ 'MalePPdfr',
                             Sex == 'Herm' & geno == 'Pdf-1' ~ 'HermPdf1',
                             Sex == 'Herm' & geno == 'Pdf-2' ~ 'HermPdf2',
                             Sex == 'Male' & geno == 'Pdf-1' ~ 'MalePdf1',
                             Sex == 'Male' & geno == 'Pdf-2' ~ 'MalePdf2',
                             Sex == 'Male' & geno == 'Osm-5::Tra-2' ~ 'MaleSensFem'
    )) %>% mutate_at(c("x","y"),numbers) 
  
  }

# butts= Worm.test.GT %>% select(Date,Sex,plateNumber,animalNumber)
# 
# butts= Worm.test.GT %>% filter(`Eye L.State`=="Tail Chase") %>% select(Date,plateNumber,animalNumber) %>% 
#   group_by(Date,plateNumber,animalNumber) %>% mutate(count=n()) %>% unique()

### Prediction Groups

{
  coolio.3.pred= as.data.frame(merged.wrmt.Pred.Final)
  Worm.test.Pred = coolio.3.pred %>%
    mutate(file= qdapRegex::ex_between(file.ID,"ALL/", "x")) %>% 
    mutate(worm_ID = paste0(animalNumber,".",file)) %>%
    mutate(file= qdapRegex::ex_between(file.ID,"ALL/", "_")) %>%
    mutate(plateNumber = case_when(grepl(10, file) ~ 10,
                                   grepl(11, file) ~ 11,
                                   grepl(12, file) ~ 12,
                                   grepl(13, file) ~ 13,
                                   grepl(14, file) ~ 14,
                                   grepl(15, file) ~ 15,
                                   grepl(16, file) ~ 16,
                                   grepl(17, file) ~ 17,
                                   grepl(18, file) ~ 18,
                                   grepl(19, file) ~ 19,
                                   grepl(20, file) ~ 20,
                                   grepl(21, file) ~ 21,
                                   grepl(22, file) ~ 22,
                                   grepl(23, file) ~ 23,
                                   grepl(24, file) ~ 24,
                                   grepl(25, file) ~ 25,
                                   grepl(26, file) ~ 26,
                                   grepl(1, file) ~ 1,
                                   grepl(2, file) ~ 2,
                                   grepl(3, file) ~ 3,
                                   grepl(4, file) ~ 4,
                                   grepl(5, file) ~ 5,
                                   grepl(6, file) ~ 6,
                                   grepl(7, file) ~ 7,
                                   grepl(8, file) ~ 8,
                                   grepl(9, file) ~ 9)) %>%
    mutate(Sex = case_when(grepl('Male', file) ~ 'Male',
                           grepl('Herm', file) ~ 'Herm')) %>%
    mutate(food = case_when(grepl('BF', file) ~ 'Big Food',
                            grepl('SF', file) ~ 'Small Food')) %>%
    mutate(geno = case_when(grepl("OsmTra",file) ~ 'Osm-5::Tra-2',
                            grepl("Pdf.1", file) ~ 'Pdf-1',
                            grepl("Pdf1", file) ~ 'Pdf-1',
                            grepl("Pdf2", file) ~ 'Pdf-2',
                            grepl("FFPP",file) ~ 'PPdfr',
                            grepl("Tph", file) ~ 'Tph',
                            grepl("TPH", file) ~ 'Tph',
                            grepl("Pdfr", file) ~ 'Pdfr',
                            grepl("PDFR", file) ~ 'Pdfr',
                            grepl('Cat2',file) ~ 'Cat2',
                            grepl('Cat',file) ~ 'Cat2',
                            grepl('NTs',file) ~ 'Him5',
                            #grepl('P',file) ~ 'Him5',
                            TRUE~ 'Him5')) %>%
    mutate(pheromone = case_when(grepl('Ascr', file) ~ 'Ascr#3',
                                 grepl('Ctrl', file) ~ 'Control',
                                 TRUE~ 'None')) %>% 
    mutate(spread = case_when(grepl('Dot', file) ~ 'Dot',
                              grepl('Even', file) ~ 'Even'
    )) %>% 
    mutate(Sex_Reverse = case_when(grepl('Fem', file) ~ 'Feminine',
                                   grepl('Masc', file) ~ 'Masculine',
                                   TRUE ~ 'WT'
    )) %>%
    mutate(WPP = case_when(grepl('Single', file) ~ 'Single',
                           TRUE ~ 'Multi'
    )) %>%
    mutate(Date= qdapRegex::ex_between(worm_ID,"_", ".")) %>%
    
    mutate(group = case_when(Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & pheromone=='Ascr#3' & spread =='Dot' ~ 'HermAscrDot',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & pheromone=='Ascr#3' & spread =='Dot' ~ 'MaleAscrDot',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & pheromone=='Ascr#3' & spread =='Even' ~ 'HermAscrEven',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & pheromone=='Ascr#3' & spread =='Even' ~ 'MaleAscrEven',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & pheromone=='Control' & spread =='Dot' ~ 'HermCtrlDot',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & pheromone=='Control' & spread =='Dot' ~ 'MaleCtrlDot',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & pheromone=='Control' & spread =='Even' ~ 'HermCtrlEven',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & pheromone=='Control' & spread =='Even' ~ 'MaleCtrlEven',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & Sex_Reverse== 'Feminine' ~ 'HermFem',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & Sex_Reverse== 'Masculine' ~ 'HermMasc',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & Sex_Reverse== 'Feminine' ~ 'MaleFem',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & Sex_Reverse== 'Masculine' ~ 'MaleMasc',
                             Sex == 'Herm' & geno == 'Him5' & Sex_Reverse== 'Feminine' ~ 'HermFem',
                             Sex == 'Herm' & geno == 'Him5' & Sex_Reverse== 'Masculine' ~ 'HermMasc',
                             Sex == 'Male' & geno == 'Him5' & Sex_Reverse== 'Feminine' ~ 'MaleFem',
                             Sex == 'Male' & geno == 'Him5' & Sex_Reverse== 'Masculine' ~ 'MaleMasc',
                             Sex == 'Herm' & food == 'Big Food' & geno == 'Him5' ~ 'HermFoodNBF',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' ~ 'HermFoodNSF',
                             #Sex == 'Herm' & geno == 'Him5' ~ 'HermFoodNSF',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & WPP=='Multi' ~ 'HermFoodNSF',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Him5' & WPP=='Single' ~ 'HermSingle',
                             Sex == 'Male' & food == 'Big Food' & geno == 'Him5' ~ 'MaleFoodNBF',
                             #Sex == 'Male' & food == 'Small Food' & geno == 'Him5' ~ 'MaleFoodNSF',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & WPP=='Multi' ~ 'MaleFoodNSF',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Him5' & WPP=='Single' ~ 'MaleSingle',
                             Sex == 'Male' & geno == 'Him5' ~ 'MaleFoodNSF',
                             Sex == 'Herm' & food == 'Big Food' & geno == 'Tph' ~ 'HermTph',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Tph' ~ 'HermTph',
                             Sex == 'Herm'  & geno == 'Tph' ~ 'HermTph',
                             Sex == 'Male' & food == 'Big Food' & geno == 'Tph' ~ 'MaleTph',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Tph' ~ 'MaleTph',
                             Sex == 'Male' & geno == 'Tph' ~ 'MaleTph',
                             Sex == 'Herm' & food == 'Big Food' & geno == 'Pdfr' ~ 'HermPdfr',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Pdfr' ~ 'HermPdfr',
                             Sex == 'Herm' & geno == 'Pdfr' ~ 'HermPdfr',
                             Sex == 'Male' & food == 'Big Food' & geno == 'Pdfr' ~ 'MalePdfr',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Pdfr' ~ 'MalePdfr',
                             Sex == 'Male' & geno == 'Pdfr' ~ 'MalePdfr',
                             Sex == 'Herm' & food == 'Big Food' & geno == 'Cat2' ~ 'HermCat2',
                             Sex == 'Herm' & food == 'Small Food' & geno == 'Cat2' ~ 'HermCat2',
                             Sex == 'Male' & food == 'Big Food' & geno == 'Cat2' ~ 'MaleCat2',
                             Sex == 'Male' & food == 'Small Food' & geno == 'Cat2' ~ 'MaleCat2',
                             Sex == 'Male' & food == 'Small Food' & geno == 'PPdfr' ~ 'MalePPdfr',
                             Sex == 'Herm' & geno == 'Pdf-1' ~ 'HermPdf1',
                             Sex == 'Herm' & geno == 'Pdf-2' ~ 'HermPdf2',
                             Sex == 'Male' & geno == 'Pdf-1' ~ 'MalePdf1',
                             Sex == 'Male' & geno == 'Pdf-2' ~ 'MalePdf2',
                             Sex == 'Male' & geno == 'Osm-5::Tra-2' ~ 'MaleSensFem'
    )) %>% mutate_at(c("x","y"),numbers) 
  
}

butts= Worm.test.Pred %>% filter(group=='MaleSensFem')

##### Calculate Various Features of Tracks Ground_Truth

#####sample rate of video
tim<-1  #seconds/frame
#########
subsamp<-1  #subsample rate frames

tracks.df<-as.data.frame(Worm.test.GT)

tracks.df <- tracks.df %>%
  mutate(y=y/1040, x=x/1040) %>% #1040pix/cm
  mutate(y = 2.748-y) %>% dplyr::select(-`spread`,-`food`) #%>% na.omit() 

#tracks.df<- tracks.df %>% select(-...1,-`Unnamed: 0`) 

tracks2.GT<-tracks.df %>%
  # group_by(Date,group,plateNumber,animalNumber) %>% 
  # mutate(x= ((lag(x,2)+lag(x)+x+lead(x)+lead(x,4))/9),
  #        y= ((lag(y,2)+lag(y)+y+lead(y)+lead(y,4))/9)
  # )%>% ungroup() %>% 
  mutate(Date= qdapRegex::ex_between(worm_ID,"_", ".")) %>%
  group_by(Date,group,plateNumber,animalNumber) %>% 
  mutate(linspeed=sqrt((lead(x)-x)^2+(lead(y)-y)^2)) %>% 
  #####converts to mm/s #####
mutate(linspeed=(linspeed/tim)*10) %>% 
  mutate(first_d = (lead(linspeed,1)-linspeed)/tim) %>% 
  # mutate(first_d = abs(first_d)) %>% 
  mutate(dy= y - lag(y))%>%
  mutate(dx= x - lag(x)) %>% 
  mutate(q1= abs(dy/dx))%>%
  mutate(q2= abs(dx/dy))%>%
  mutate(angle = case_when(
    dy==0 & dx>0 ~180,
    dy == 0 & dx < 0 ~ 0,
    dx == 0 & dy > 0 ~ 90,
    dx == 0 & dy < 0 ~ 270,
    dx < 0 & dy < 0 ~ (270 + (180 / pi) * atan(q2)),
    dx > 0 & dy < 0 ~ (180 + (180 / pi) * atan(q1)),
    dx > 0 & dy > 0 ~ (90 + (180 / pi) * atan(q2)),
    dx < 0 & dy > 0 ~ ((180 / pi) * atan(q1))
  )) %>% 
  mutate(dthet= (angle - lead(angle))) %>% 
  mutate(theta= case_when
         (abs(dthet) >180 ~ abs(dthet)-360,
           abs(dthet) <180 ~ dthet)) %>% 
  mutate(ang= (abs(theta))) %>% na.omit() %>% 
  mutate(dt_ang=((lead(ang,1)-ang))/tim,               #average angular acceleration
         dt_ang=abs(dt_ang)) %>% na.omit() %>%         #get rid of random NAs                 
  mutate(d=linspeed*tim,
         rad_vel=(linspeed*sin(ang*(pi/180))), #tangential velocity - when absent straight line (vsin(o))
         tan_vel=(linspeed*cos(ang*(pi/180))),          #radial velocity - total linear velocity of curvilinear motion v= vparallel+vperp or linspeed=tan_vel+rad_vel
         rad_accel=lead(rad_vel)-rad_vel,
         tan_accel=lead(tan_vel)-tan_vel) %>% na.omit() %>% 
  ungroup() %>% group_by(Date,group,animalNumber,plateNumber) %>% 
  mutate(checksum=(rad_vel)+abs(tan_vel),
         mnra=mean(rad_accel),
         mnta=mean(tan_accel),
         mnrv=mean(rad_vel),
         mntv=mean(tan_vel),
         var_rad_accel=(rad_accel-mnra)^2,
         var_tan_accel=(tan_accel-mnta)^2,
         var_rad_vel=(rad_vel-mnrv)^2,
         var_tan_vel=(tan_vel-mntv)^2) %>%          #instantaneous rad_accel linear velocity^2/r
  mutate(turn= case_when(abs(dt_ang)>90 ~1,
                         abs(dt_ang)<=90 ~0)) %>% 
  mutate(r_calc = (lead(linspeed,1)-linspeed)) %>%
  mutate(reversal= case_when((r_calc)<0 ~1,
                             (dt_ang)>=0 ~0)) %>% 
  na.omit() %>% 
  filter(linspeed<0.4) %>%      # to get actual speed
  ungroup()

##### Calculate Various Features of Tracks Prediction


######## Predicition Samples
#####sample rate of video
tim<-1  #seconds/frame
#########
subsamp<-1  #subsample rate frames

tracks.df<-as.data.frame(Worm.test.Pred)

tracks.df <- tracks.df %>%
  mutate(y=y/1040, x=x/1040) %>% #1040pix/cm
  mutate(y = 2.748-y) %>% dplyr::select(-`spread`,-`food`) #%>% na.omit() 

#tracks.df<- tracks.df %>% select(-...1,-`Unnamed: 0`) 

tracks2.Pred<-tracks.df %>%
  # group_by(Date,group,plateNumber,animalNumber) %>% 
  # mutate(x= ((lag(x,2)+lag(x)+x+lead(x)+lead(x,4))/9),
  #        y= ((lag(y,2)+lag(y)+y+lead(y)+lead(y,4))/9)
  # )%>% ungroup() %>% 
  mutate(Date= qdapRegex::ex_between(worm_ID,"_", ".")) %>%
  group_by(Date,group,plateNumber,animalNumber) %>% 
  mutate(linspeed=sqrt((lead(x)-x)^2+(lead(y)-y)^2)) %>% 
  #####converts to mm/s #####
mutate(linspeed=(linspeed/tim)*10) %>% 
  mutate(first_d = (lead(linspeed,1)-linspeed)/tim) %>% 
  # mutate(first_d = abs(first_d)) %>% 
  mutate(dy= y - lag(y))%>%
  mutate(dx= x - lag(x)) %>% 
  mutate(q1= abs(dy/dx))%>%
  mutate(q2= abs(dx/dy))%>%
  mutate(angle = case_when(
    dy==0 & dx>0 ~180,
    dy == 0 & dx < 0 ~ 0,
    dx == 0 & dy > 0 ~ 90,
    dx == 0 & dy < 0 ~ 270,
    dx < 0 & dy < 0 ~ (270 + (180 / pi) * atan(q2)),
    dx > 0 & dy < 0 ~ (180 + (180 / pi) * atan(q1)),
    dx > 0 & dy > 0 ~ (90 + (180 / pi) * atan(q2)),
    dx < 0 & dy > 0 ~ ((180 / pi) * atan(q1))
  )) %>% 
  mutate(dthet= (angle - lead(angle))) %>% 
  mutate(theta= case_when
         (abs(dthet) >180 ~ abs(dthet)-360,
           abs(dthet) <180 ~ dthet)) %>% 
  mutate(ang= (abs(theta))) %>% na.omit() %>% 
  mutate(dt_ang=((lead(ang,1)-ang))/tim,               #average angular acceleration
         dt_ang=abs(dt_ang)) %>% na.omit() %>%         #get rid of random NAs                 
  mutate(d=linspeed*tim,
         rad_vel=(linspeed*sin(ang*(pi/180))), #tangential velocity - when absent straight line (vsin(o))
         tan_vel=(linspeed*cos(ang*(pi/180))),          #radial velocity - total linear velocity of curvilinear motion v= vparallel+vperp or linspeed=tan_vel+rad_vel
         rad_accel=lead(rad_vel)-rad_vel,
         tan_accel=lead(tan_vel)-tan_vel) %>% na.omit() %>% 
  ungroup() %>% group_by(Date,group,animalNumber,plateNumber) %>% 
  mutate(checksum=(rad_vel)+abs(tan_vel),
         mnra=mean(rad_accel),
         mnta=mean(tan_accel),
         mnrv=mean(rad_vel),
         mntv=mean(tan_vel),
         var_rad_accel=(rad_accel-mnra)^2,
         var_tan_accel=(tan_accel-mnta)^2,
         var_rad_vel=(rad_vel-mnrv)^2,
         var_tan_vel=(tan_vel-mntv)^2) %>%          #instantaneous rad_accel linear velocity^2/r
  mutate(turn= case_when(abs(dt_ang)>90 ~1,
                         abs(dt_ang)<=90 ~0)) %>% 
  mutate(r_calc = (lead(linspeed,1)-linspeed)) %>%
  mutate(reversal= case_when((r_calc)<0 ~1,
                             (dt_ang)>=0 ~0)) %>% 
  na.omit() %>% 
  filter(linspeed<0.4) %>%      # to get actual speed
  ungroup()

tracks.unbroken=tracks2.Pred

### Filter out breaks in tracks
tracks2.Pred<- tracks2.Pred %>% mutate_at(c("timebin"),numbers) %>% 
  group_by(Date,group,plateNumber,animalNumber) %>% mutate(Break=lead(timebin,1)-timebin) %>% 
  filter(Break<=1)

butts= tracks2.Pred %>% filter(geno=='Pdf-1')


####Add in 10s avg Comment Out if not using
n=10

tracks.Plate.Animal.count<-tracks2.Pred %>% ungroup() %>%group_by(`Date`,group,plateNumber,animalNumber) %>% 
  mutate(mean = (row_number()) %/% n) %>% group_by(Date,group,plateNumber,animalNumber,mean) %>% 
  mutate(lin.vel.avg = mean(`linspeed`)) %>% mutate(ang.avg= mean(`ang`)) %>% 
  group_by(Date,group,plateNumber,animalNumber,mean) %>% add_tally()

tracks2.df=rename(tracks.Plate.Animal.count, mean10 = n)

##### Random Forest Classification
##Fix Labeling for Ground Truth
tracks.GT.RF=tracks2.GT %>% mutate(ELS=case_when(grepl('Roaming',`Eye L.State`) ~ 'Roam',
                                                 grepl('Roam',`Eye L.State`) ~ 'Roam',
                                                 grepl('Dwell',`Eye L.State`) ~ 'Dwell',
                                                 grepl('Tail Chase',`Eye L.State`) ~ 'Tail Chase',
                                                 grepl('Fast Turn',`Eye L.State`) ~ 'Fast Turn')) %>% 
  select(-`Eye L.State`) %>% rename_at('ELS', ~'ground_truth')


#### Add in label for controls per group for Pred
test= tracks2.Pred %>% group_by(Date,group) %>% unique()
  
unite(Ctrl,group,Date,plateNumber,animalNumber, sep = ".", remove = FALSE) %>% mutate(number = cur_group_id())
######TRAINING###########################


###Herm Model

{
rparam<-tracks.GT.RF %>% 
  filter(Sex=="Herm") %>% 
  dplyr::select(worm_ID,Date,timebin,group,animalNumber,plateNumber,`ground_truth`,linspeed,first_d,ang,rad_vel,rad_accel,tan_vel,tan_accel,rad_accel,tan_accel,var_rad_vel,var_tan_vel,var_rad_accel,var_tan_accel) %>% 
  na.omit()

rparam_test.R= rparam %>% filter(`ground_truth`=='Roam')
rparam_test.D=rparam %>% filter(`ground_truth`=='Dwell') %>% Nth.delete(10)
rparam_test.TC=rparam %>% filter(`ground_truth`=='Tail Chase')

rparam_test=rbind(rparam_test.R,rparam_test.D,rparam_test.TC)


​
​
#encode temporal dependence through centered median smoothing
rparam<-rparam_test %>% ungroup() %>% group_by(worm_ID) %>% 
  mutate(ang5=rollapply(ang,5,median,align='center',fill=NA),
         ang10=rollapply(ang,10,median,align='center',fill=NA),
         ang15=rollapply(ang,15,median,align='center',fill=NA),
         ang25=rollapply(ang,30,median,align='center',fill=NA),
         ang60=rollapply(ang,60,median,align='center',fill=NA),
         
         accel5=rollapply(first_d,5,median,align='center',fill=NA),
         accel10=rollapply(first_d,10,median,align='center',fill=NA),
         accel15=rollapply(first_d,15,median,align='center',fill=NA),
         accel30=rollapply(first_d,30,median,align='center',fill=NA),
         accel60=rollapply(first_d,60,median,align='center',fill=NA),
         
         ls5=rollapply(linspeed,5,median,align='center',fill=NA),
         ls10=rollapply(linspeed,10,median,align='center',fill=NA),
         ls15=rollapply(linspeed,15,median,align='center',fill=NA),
         ls30=rollapply(linspeed,30,median,align='center',fill=NA),
         ls60=rollapply(linspeed,60,median,align='center',fill=NA),
         
         tvel5=rollapply(tan_vel,5,median,align='center',fill=NA),
         tvel10=rollapply(tan_vel,10,median,align='center',fill=NA),
         tvel15=rollapply(tan_vel,15,median,align='center',fill=NA),
         tvel30=rollapply(tan_vel,30,median,align='center',fill=NA),
         tvel60=rollapply(tan_vel,60,median,align='center',fill=NA),
         
         rvel5=rollapply(rad_vel,5,median,align='center',fill=NA),
         rvel10=rollapply(rad_vel,10,median,align='center',fill=NA),
         rvel15=rollapply(rad_vel,15,median,align='center',fill=NA),
         rvel30=rollapply(rad_vel,30,median,align='center',fill=NA),
         rvel60=rollapply(rad_vel,60,median,align='center',fill=NA),
         
         taccel5=rollapply(tan_accel,5,median,align='center',fill=NA),
         taccel10=rollapply(tan_accel,10,median,align='center',fill=NA),
         taccel15=rollapply(tan_accel,15,median,align='center',fill=NA),
         taccel30=rollapply(tan_accel,30,median,align='center',fill=NA),
         taccel60=rollapply(tan_accel,60,median,align='center',fill=NA),
         
         raccel5=rollapply(rad_accel,5,median,align='center',fill=NA),
         raccel10=rollapply(rad_accel,10,median,align='center',fill=NA),
         raccel15=rollapply(rad_accel,15,median,align='center',fill=NA),
         raccel30=rollapply(rad_accel,30,median,align='center',fill=NA),
         raccel60=rollapply(rad_accel,60,median,align='center',fill=NA),
         
         vtvel5=rollapply(var_tan_vel,5,median,align='center',fill=NA),
         vtvel10=rollapply(var_tan_vel,10,median,align='center',fill=NA),
         vtvel15=rollapply(var_tan_vel,15,median,align='center',fill=NA),
         vtvel30=rollapply(var_tan_vel,30,median,align='center',fill=NA),
         vtvel60=rollapply(var_tan_vel,60,median,align='center',fill=NA),
         
         vrvel5=rollapply(var_rad_vel,5,median,align='center',fill=NA),
         vrvel10=rollapply(var_rad_vel,10,median,align='center',fill=NA),
         vrvel15=rollapply(var_rad_vel,15,median,align='center',fill=NA),
         vrvel30=rollapply(var_rad_vel,30,median,align='center',fill=NA),
         vrvel60=rollapply(var_rad_vel,60,median,align='center',fill=NA),
         
         vtaccel5=rollapply(var_tan_accel,5,median,align='center',fill=NA),
         vtaccel10=rollapply(var_tan_accel,10,median,align='center',fill=NA),
         vtaccel15=rollapply(var_tan_accel,15,median,align='center',fill=NA),
         vtaccel30=rollapply(var_tan_accel,30,median,align='center',fill=NA),
         vtaccel60=rollapply(var_tan_accel,60,median,align='center',fill=NA),
         
         vraccel5=rollapply(var_rad_accel,5,median,align='center',fill=NA),
         vraccel10=rollapply(var_rad_accel,10,median,align='center',fill=NA),
         vraccel15=rollapply(var_rad_accel,15,median,align='center',fill=NA),
         vraccel30=rollapply(var_rad_accel,30,median,align='center',fill=NA),
         vraccel60=rollapply(var_rad_accel,60,median,align='center',fill=NA),
  ) %>%
  na.omit() 


#############################################
​
rparam_mod<-rparam[,c(7:73)] #these are column ranges to select the ones that would be useful for the model you might have to change these for your set up
​

### Check control ratio of LS and plot######## Comment out if not using###############
# tabpropherm= as.matrix(table(rparam$`ground_truth`))
# 
# prop.plotH= as.data.frame(prop.table(tabpropherm)) %>% tibble::rownames_to_column() %>%
#   rename_at('rowname',~'state') %>% tibble::rownames_to_column() %>% rename_at('rowname',~'sex')
# 
# prop.plotH[prop.plotH==1 |prop.plotH==2]<-'Herm'
# 
# tabpropmale= as.matrix(table(rparam$`ground_truth`))
# 
# prop.plotM.Greg= as.data.frame(prop.table(tabpropmale)) %>% tibble::rownames_to_column() %>%
#   rename_at('rowname',~'state') %>% tibble::rownames_to_column() %>% rename_at('rowname',~'sex')
# 
# prop.plotM[prop.plotM==1 |prop.plotM==2]<-'Male'
# 
# prop.plot=rbind(prop.plotM,prop.plotH)
# 
# ggplot(prop.plot, aes(x=sex,y=V1,fill=state))+
#   geom_bar(position = 'stack',stat = 'identity')+
#   labs(x='Group', y='Proportion of Time Spent in Locomotor State', title='Proportion of time Roaming and Dwelling') +
#   theme(plot.title = element_text(hjust=0.5, size=20, face='bold'))

####SUBSET for TRAINING
set.seed(123)
train.idx <- sample(nrow(rparam_mod),  4/5*nrow(rparam_mod))
feat.train <- rparam_mod[train.idx,  ]
feat.test <- rparam_mod[-train.idx, ]

rg.feat <- ranger(as.factor(`ground_truth`) ~ ., data = feat.train, importance = "impurity_corrected")
rg.feat$variable.importance

imp.h=rg.feat$variable.importance %>% as.data.frame() %>% tibble::rownames_to_column() %>% 
  rename_at('.',~'importance') %>% rename_at('rowname',~'observation')

imp.plot.h=ggplot(imp.h,aes(x=reorder(observation,importance),y=importance))+
  geom_bar(stat = 'identity')+
  coord_flip()+
  labs(y='importance',x='observations', title='Herm Random Forest Importance') +
  theme(plot.title = element_text(hjust=0.5, size=15, face='bold'))
imp.plot.h
​
####Check trained model against remaining untrained subset
set.seed(123)
rg.feat <- ranger(as.factor(`ground_truth`) ~ ., data = feat.train)
pred.feat <- predict(rg.feat, data = feat.test)
tab<-as.matrix(table(feat.test$`ground_truth`, pred.feat$predictions))
prop.table(tab, 1)
plt<-as.data.frame(prop.table(tab, 1))
colnames(plt)<- c("Ground_truth","Prediction","Freq")
plt$Freq<-round(plt$Freq,digits=3)
cm.h<-ggplot(plt, aes(Ground_truth,Prediction, fill= Freq)) +
  geom_tile() + geom_text(aes(label=Freq)) +
  scale_fill_gradient2(low=muted("blue"),high=("orange"),midpoint = 0.5 )+
  labs(x = "Ground Truth",y = "Prediction",title = "Hermaphrodite Confusion Matrix")
cm.h

​
#Test model against full training data set
rparam2<-rparam[,c(7:73)]
ranger(as.factor(`ground_truth`) ~ ., data = rparam2)
​
set.seed(123)
rg.feat <- ranger(as.factor(`ground_truth`) ~ ., data = feat.train,mtry = 10)
​
​
###########################################################################
###APPEND APPROPRIATE SEX DESIGNATION (e.g. rg.feat_m/h)   #################
rg.feat_h<-rg.feat
###########################################################################
pred.feat <- predict(rg.feat, data = rparam2)
tab<-as.matrix(table(rparam2$`ground_truth`, pred.feat$predictions))
table(rparam2$`ground_truth`, pred.feat$predictions)
prop.table(tab, 1)
rpred<-pred.feat$predictions
tab
​
​
# percent.table(rparam2$ground_truth, pred.feat$predictions)
rparam2<-cbind(rparam,rpred=rpred)

​
​
​
###########################################################################
###APPEND APPROPRIATE SEX DESIGNATION (e.g. rg.feat_m/h)   #################
rparam_h<-rparam2
###########################################################################
}

### Check Results
imp.plot.h
cm.h



####################Male Model
##Remove group for plot 
RF.m3.plot= tracks.GT.RF %>% filter(worm_ID=='7./Male6SF_22-2-8.') %>% select(-ground_truth)
  
tracks2.pred= merge(tracks2.Pred, RF.m3.plot)


{
rparam<-tracks.GT.RF %>% 
  filter(Sex=="Male") %>% 
  dplyr::select(worm_ID,Date,timebin,group,animalNumber,plateNumber,`ground_truth`,linspeed,first_d,ang,rad_vel,rad_accel,tan_vel,tan_accel,rad_accel,tan_accel,var_rad_vel,var_tan_vel,var_rad_accel,var_tan_accel) %>% 
  na.omit()

rparam_test.R= rparam %>% filter(`ground_truth`=='Roam') %>% Nth.delete(10)
rparam_test.D=rparam %>% filter(`ground_truth`=='Dwell') 
rparam_test.TC=rparam %>% filter(`ground_truth`=='Tail Chase')

rparam_test=rbind(rparam_test.R,rparam_test.D,rparam_test.TC)


​
​
#encode temporal dependence through centered median smoothing
rparam<-rparam_test %>% ungroup() %>% group_by(worm_ID) %>% 
  mutate(ang5=rollapply(ang,5,median,align='center',fill=NA),
         ang10=rollapply(ang,10,median,align='center',fill=NA),
         ang15=rollapply(ang,15,median,align='center',fill=NA),
         ang25=rollapply(ang,30,median,align='center',fill=NA),
         ang60=rollapply(ang,60,median,align='center',fill=NA),
         
         accel5=rollapply(first_d,5,median,align='center',fill=NA),
         accel10=rollapply(first_d,10,median,align='center',fill=NA),
         accel15=rollapply(first_d,15,median,align='center',fill=NA),
         accel30=rollapply(first_d,30,median,align='center',fill=NA),
         accel60=rollapply(first_d,60,median,align='center',fill=NA),
         
         ls5=rollapply(linspeed,5,median,align='center',fill=NA),
         ls10=rollapply(linspeed,10,median,align='center',fill=NA),
         ls15=rollapply(linspeed,15,median,align='center',fill=NA),
         ls30=rollapply(linspeed,30,median,align='center',fill=NA),
         ls60=rollapply(linspeed,60,median,align='center',fill=NA),
         
         tvel5=rollapply(tan_vel,5,median,align='center',fill=NA),
         tvel10=rollapply(tan_vel,10,median,align='center',fill=NA),
         tvel15=rollapply(tan_vel,15,median,align='center',fill=NA),
         tvel30=rollapply(tan_vel,30,median,align='center',fill=NA),
         tvel60=rollapply(tan_vel,60,median,align='center',fill=NA),
         
         rvel5=rollapply(rad_vel,5,median,align='center',fill=NA),
         rvel10=rollapply(rad_vel,10,median,align='center',fill=NA),
         rvel15=rollapply(rad_vel,15,median,align='center',fill=NA),
         rvel30=rollapply(rad_vel,30,median,align='center',fill=NA),
         rvel60=rollapply(rad_vel,60,median,align='center',fill=NA),
         
         taccel5=rollapply(tan_accel,5,median,align='center',fill=NA),
         taccel10=rollapply(tan_accel,10,median,align='center',fill=NA),
         taccel15=rollapply(tan_accel,15,median,align='center',fill=NA),
         taccel30=rollapply(tan_accel,30,median,align='center',fill=NA),
         taccel60=rollapply(tan_accel,60,median,align='center',fill=NA),
         
         raccel5=rollapply(rad_accel,5,median,align='center',fill=NA),
         raccel10=rollapply(rad_accel,10,median,align='center',fill=NA),
         raccel15=rollapply(rad_accel,15,median,align='center',fill=NA),
         raccel30=rollapply(rad_accel,30,median,align='center',fill=NA),
         raccel60=rollapply(rad_accel,60,median,align='center',fill=NA),
         
         vtvel5=rollapply(var_tan_vel,5,median,align='center',fill=NA),
         vtvel10=rollapply(var_tan_vel,10,median,align='center',fill=NA),
         vtvel15=rollapply(var_tan_vel,15,median,align='center',fill=NA),
         vtvel30=rollapply(var_tan_vel,30,median,align='center',fill=NA),
         vtvel60=rollapply(var_tan_vel,60,median,align='center',fill=NA),
         
         vrvel5=rollapply(var_rad_vel,5,median,align='center',fill=NA),
         vrvel10=rollapply(var_rad_vel,10,median,align='center',fill=NA),
         vrvel15=rollapply(var_rad_vel,15,median,align='center',fill=NA),
         vrvel30=rollapply(var_rad_vel,30,median,align='center',fill=NA),
         vrvel60=rollapply(var_rad_vel,60,median,align='center',fill=NA),
         
         vtaccel5=rollapply(var_tan_accel,5,median,align='center',fill=NA),
         vtaccel10=rollapply(var_tan_accel,10,median,align='center',fill=NA),
         vtaccel15=rollapply(var_tan_accel,15,median,align='center',fill=NA),
         vtaccel30=rollapply(var_tan_accel,30,median,align='center',fill=NA),
         vtaccel60=rollapply(var_tan_accel,60,median,align='center',fill=NA),
         
         vraccel5=rollapply(var_rad_accel,5,median,align='center',fill=NA),
         vraccel10=rollapply(var_rad_accel,10,median,align='center',fill=NA),
         vraccel15=rollapply(var_rad_accel,15,median,align='center',fill=NA),
         vraccel30=rollapply(var_rad_accel,30,median,align='center',fill=NA),
         vraccel60=rollapply(var_rad_accel,60,median,align='center',fill=NA),
  ) %>%
  na.omit() 


#############################################
​
rparam_mod<-rparam[,c(7:73)] #these are column ranges to select the ones that would be useful for the model you might have to change these for your set up
​

### Check control ratio of LS and plot######## Comment out if not using###############
# tabpropherm= as.matrix(table(rparam$`ground_truth`))
# 
# prop.plotH= as.data.frame(prop.table(tabpropherm)) %>% tibble::rownames_to_column() %>%
#   rename_at('rowname',~'state') %>% tibble::rownames_to_column() %>% rename_at('rowname',~'sex')
# 
# prop.plotH[prop.plotH==1 |prop.plotH==2]<-'Herm'
# 
# tabpropmale= as.matrix(table(rparam$`ground_truth`))
# 
# prop.plotM.Greg= as.data.frame(prop.table(tabpropmale)) %>% tibble::rownames_to_column() %>%
#   rename_at('rowname',~'state') %>% tibble::rownames_to_column() %>% rename_at('rowname',~'sex')
# 
# prop.plotM[prop.plotM==1 |prop.plotM==2]<-'Male'
# 
# prop.plot=rbind(prop.plotM,prop.plotH)
# 
# ggplot(prop.plot, aes(x=sex,y=V1,fill=state))+
#   geom_bar(position = 'stack',stat = 'identity')+
#   labs(x='Group', y='Proportion of Time Spent in Locomotor State', title='Proportion of time Roaming and Dwelling') +
#   theme(plot.title = element_text(hjust=0.5, size=20, face='bold'))

####SUBSET for TRAINING
set.seed(123)
train.idx <- sample(nrow(rparam_mod),  4/5*nrow(rparam_mod))
feat.train <- rparam_mod[train.idx,  ]
feat.test <- rparam_mod[-train.idx, ]

rg.feat <- ranger(as.factor(`ground_truth`) ~ ., data = feat.train, importance = "impurity_corrected")
rg.feat$variable.importance

imp.m=rg.feat$variable.importance %>% as.data.frame() %>% tibble::rownames_to_column() %>% 
  rename_at('.',~'importance') %>% rename_at('rowname',~'observation')

imp.plot.m=ggplot(imp.m,aes(x=reorder(observation,importance),y=importance))+
  geom_bar(stat = 'identity')+
  coord_flip()+
  labs(y='importance',x='observations', title='Male Random Forest Importance') +
  theme(plot.title = element_text(hjust=0.5, size=15, face='bold'))

​
####Check trained model against remaining untrained subset
set.seed(123)
rg.feat <- ranger(as.factor(`ground_truth`) ~ ., data = feat.train)
pred.feat <- predict(rg.feat, data = feat.test)
tab<-as.matrix(table(feat.test$`ground_truth`, pred.feat$predictions))
prop.table(tab, 1)
plt<-as.data.frame(prop.table(tab, 1))
colnames(plt)<- c("Ground_truth","Prediction","Freq")
plt$Freq<-round(plt$Freq,digits=3)
cm.m<-ggplot(plt, aes(Ground_truth,Prediction, fill= Freq)) +
  geom_tile() + geom_text(aes(label=Freq)) +
  scale_fill_gradient2(low=muted("blue"),high=("orange"),midpoint = 0.5 )+
  labs(x = "Ground Truth",y = "Prediction", title = "Male Confusion Matrix")


​
#Test model against full training data set
rparam2<-rparam[,c(7:73)]
ranger(as.factor(`ground_truth`) ~ ., data = rparam2)
​
set.seed(123)
rg.feat <- ranger(as.factor(`ground_truth`) ~ ., data = feat.train,mtry = 10)
​
​
###########################################################################
###APPEND APPROPRIATE SEX DESIGNATION (e.g. rg.feat_m/h)   #################
rg.feat_m<-rg.feat
###########################################################################
pred.feat <- predict(rg.feat, data = rparam2)
tab<-as.matrix(table(rparam2$`ground_truth`, pred.feat$predictions))
table(rparam2$`ground_truth`, pred.feat$predictions)
prop.table(tab, 1)
rpred<-pred.feat$predictions
tab
​
​
# percent.table(rparam2$ground_truth, pred.feat$predictions)
rparam2<-cbind(rparam,rpred=rpred)

​
​
​
###########################################################################
###APPEND APPROPRIATE SEX DESIGNATION (e.g. rg.feat_m/h)   #################
rparam_m<-rparam2
###########################################################################
}


### Plots to check accuracy
imp.plot.m
cm.m

## Put all data in one big group
​
rg_result<-rbind(rparam_h,rparam_m)
​
​
​

#   NEW DATA PREDICTION#######

##For Herm WT

{
rparam<-tracks2.Pred %>% 
  filter(group=="HermFoodNSF") %>% dplyr::ungroup() %>% 
  dplyr::select(worm_ID,Date,timebin,group,animalNumber,plateNumber,linspeed,first_d,ang,turn,rad_vel,rad_accel,tan_vel,tan_accel,rad_accel,tan_accel,var_rad_vel,var_tan_vel,var_rad_accel,var_tan_accel) %>% 
  na.omit()
​
​
#encode temporal dependence through centered median smoothing
rparam=rparam %>%    mutate(ang5=rollapply(ang,5,median,align='center',fill=NA),
                            ang10=rollapply(ang,10,median,align='center',fill=NA),
                            ang15=rollapply(ang,15,median,align='center',fill=NA),
                            ang25=rollapply(ang,30,median,align='center',fill=NA),
                            ang60=rollapply(ang,60,median,align='center',fill=NA),
                            
                            accel5=rollapply(first_d,5,median,align='center',fill=NA),
                            accel10=rollapply(first_d,10,median,align='center',fill=NA),
                            accel15=rollapply(first_d,15,median,align='center',fill=NA),
                            accel30=rollapply(first_d,30,median,align='center',fill=NA),
                            accel60=rollapply(first_d,60,median,align='center',fill=NA),
                            
                            ls5=rollapply(linspeed,5,median,align='center',fill=NA),
                            ls10=rollapply(linspeed,10,median,align='center',fill=NA),
                            ls15=rollapply(linspeed,15,median,align='center',fill=NA),
                            ls30=rollapply(linspeed,30,median,align='center',fill=NA),
                            ls60=rollapply(linspeed,60,median,align='center',fill=NA),
                            
                            tvel5=rollapply(tan_vel,5,median,align='center',fill=NA),
                            tvel10=rollapply(tan_vel,10,median,align='center',fill=NA),
                            tvel15=rollapply(tan_vel,15,median,align='center',fill=NA),
                            tvel30=rollapply(tan_vel,30,median,align='center',fill=NA),
                            tvel60=rollapply(tan_vel,60,median,align='center',fill=NA),
                            
                            rvel5=rollapply(rad_vel,5,median,align='center',fill=NA),
                            rvel10=rollapply(rad_vel,10,median,align='center',fill=NA),
                            rvel15=rollapply(rad_vel,15,median,align='center',fill=NA),
                            rvel30=rollapply(rad_vel,30,median,align='center',fill=NA),
                            rvel60=rollapply(rad_vel,60,median,align='center',fill=NA),
                            
                            
                            taccel5=rollapply(tan_accel,5,median,align='center',fill=NA),
                            taccel10=rollapply(tan_accel,10,median,align='center',fill=NA),
                            taccel15=rollapply(tan_accel,15,median,align='center',fill=NA),
                            taccel30=rollapply(tan_accel,30,median,align='center',fill=NA),
                            taccel60=rollapply(tan_accel,60,median,align='center',fill=NA),
                            
                            raccel5=rollapply(rad_accel,5,median,align='center',fill=NA),
                            raccel10=rollapply(rad_accel,10,median,align='center',fill=NA),
                            raccel15=rollapply(rad_accel,15,median,align='center',fill=NA),
                            raccel30=rollapply(rad_accel,30,median,align='center',fill=NA),
                            raccel60=rollapply(rad_accel,60,median,align='center',fill=NA),
                            
                            
                            vtvel5=rollapply(var_tan_vel,5,median,align='center',fill=NA),
                            vtvel10=rollapply(var_tan_vel,10,median,align='center',fill=NA),
                            vtvel15=rollapply(var_tan_vel,15,median,align='center',fill=NA),
                            vtvel30=rollapply(var_tan_vel,30,median,align='center',fill=NA),
                            vtvel60=rollapply(var_tan_vel,60,median,align='center',fill=NA),
                            
                            vrvel5=rollapply(var_rad_vel,5,median,align='center',fill=NA),
                            vrvel10=rollapply(var_rad_vel,10,median,align='center',fill=NA),
                            vrvel15=rollapply(var_rad_vel,15,median,align='center',fill=NA),
                            vrvel30=rollapply(var_rad_vel,30,median,align='center',fill=NA),
                            vrvel60=rollapply(var_rad_vel,60,median,align='center',fill=NA),
                            
                            vtaccel5=rollapply(var_tan_accel,5,median,align='center',fill=NA),
                            vtaccel10=rollapply(var_tan_accel,10,median,align='center',fill=NA),
                            vtaccel15=rollapply(var_tan_accel,15,median,align='center',fill=NA),
                            vtaccel30=rollapply(var_tan_accel,30,median,align='center',fill=NA),
                            vtaccel60=rollapply(var_tan_accel,60,median,align='center',fill=NA),
                            
                            vraccel5=rollapply(var_rad_accel,5,median,align='center',fill=NA),
                            vraccel10=rollapply(var_rad_accel,10,median,align='center',fill=NA),
                            vraccel15=rollapply(var_rad_vel,15,median,align='center',fill=NA),
                            vraccel30=rollapply(var_rad_accel,30,median,align='center',fill=NA),
                            vraccel60=rollapply(var_rad_accel,60,median,align='center',fill=NA),
) %>%
  na.omit()
​
rparam2<-rparam[,c(7:73)]
set.seed(123)
pred.feat <- predict(rg.feat_h, data = rparam2) #Change rgfeat to right sex
​
rpred<-pred.feat$predictions
# percent.table(rparam2$ground_truth, pred.feat$predictions)
rparam2<-cbind(rparam,rpred=rpred)
​
​
​
###########################################################################
###APPEND APPROPRIATE SEX DESIGNATION (e.g. rg.feat_m/h)   #################
rparam_hpred<-rparam2

####### Add State to new plot before rbind
rparam_hpred= rparam_hpred %>% mutate(State = case_when(grepl('Dwell', rpred) ~ 1,
                                                        grepl('Roam', rpred) ~ 2,
                                                        grepl('Tail Chase',rpred)~3,
                                                        grepl('Fast Turn',rpred)~4
)) 

###########################################################################

​
​
}


#### Quick Check on RF Prediction####
tabh<-as.matrix(table(rparam_hpred$rpred))
prop.table(tabh)

##### Male WT

{
  rparam<-tracks2.Pred %>% 
    filter(group=="MaleFoodNSF") %>% dplyr::ungroup() %>% 
    dplyr::select(worm_ID,Date,timebin,group,animalNumber,plateNumber,linspeed,first_d,ang,turn,rad_vel,rad_accel,tan_vel,tan_accel,rad_accel,tan_accel,var_rad_vel,var_tan_vel,var_rad_accel,var_tan_accel) %>% 
    na.omit()
  ​
  ​
  #encode temporal dependence through centered median smoothing
  rparam=rparam %>%    mutate(ang5=rollapply(ang,5,median,align='center',fill=NA),
                              ang10=rollapply(ang,10,median,align='center',fill=NA),
                              ang15=rollapply(ang,15,median,align='center',fill=NA),
                              ang25=rollapply(ang,30,median,align='center',fill=NA),
                              ang60=rollapply(ang,60,median,align='center',fill=NA),
                              
                              accel5=rollapply(first_d,5,median,align='center',fill=NA),
                              accel10=rollapply(first_d,10,median,align='center',fill=NA),
                              accel15=rollapply(first_d,15,median,align='center',fill=NA),
                              accel30=rollapply(first_d,30,median,align='center',fill=NA),
                              accel60=rollapply(first_d,60,median,align='center',fill=NA),
                              
                              ls5=rollapply(linspeed,5,median,align='center',fill=NA),
                              ls10=rollapply(linspeed,10,median,align='center',fill=NA),
                              ls15=rollapply(linspeed,15,median,align='center',fill=NA),
                              ls30=rollapply(linspeed,30,median,align='center',fill=NA),
                              ls60=rollapply(linspeed,60,median,align='center',fill=NA),
                              
                              tvel5=rollapply(tan_vel,5,median,align='center',fill=NA),
                              tvel10=rollapply(tan_vel,10,median,align='center',fill=NA),
                              tvel15=rollapply(tan_vel,15,median,align='center',fill=NA),
                              tvel30=rollapply(tan_vel,30,median,align='center',fill=NA),
                              tvel60=rollapply(tan_vel,60,median,align='center',fill=NA),
                              
                              rvel5=rollapply(rad_vel,5,median,align='center',fill=NA),
                              rvel10=rollapply(rad_vel,10,median,align='center',fill=NA),
                              rvel15=rollapply(rad_vel,15,median,align='center',fill=NA),
                              rvel30=rollapply(rad_vel,30,median,align='center',fill=NA),
                              rvel60=rollapply(rad_vel,60,median,align='center',fill=NA),
                              
                              
                              taccel5=rollapply(tan_accel,5,median,align='center',fill=NA),
                              taccel10=rollapply(tan_accel,10,median,align='center',fill=NA),
                              taccel15=rollapply(tan_accel,15,median,align='center',fill=NA),
                              taccel30=rollapply(tan_accel,30,median,align='center',fill=NA),
                              taccel60=rollapply(tan_accel,60,median,align='center',fill=NA),
                              
                              raccel5=rollapply(rad_accel,5,median,align='center',fill=NA),
                              raccel10=rollapply(rad_accel,10,median,align='center',fill=NA),
                              raccel15=rollapply(rad_accel,15,median,align='center',fill=NA),
                              raccel30=rollapply(rad_accel,30,median,align='center',fill=NA),
                              raccel60=rollapply(rad_accel,60,median,align='center',fill=NA),
                              
                              
                              vtvel5=rollapply(var_tan_vel,5,median,align='center',fill=NA),
                              vtvel10=rollapply(var_tan_vel,10,median,align='center',fill=NA),
                              vtvel15=rollapply(var_tan_vel,15,median,align='center',fill=NA),
                              vtvel30=rollapply(var_tan_vel,30,median,align='center',fill=NA),
                              vtvel60=rollapply(var_tan_vel,60,median,align='center',fill=NA),
                              
                              vrvel5=rollapply(var_rad_vel,5,median,align='center',fill=NA),
                              vrvel10=rollapply(var_rad_vel,10,median,align='center',fill=NA),
                              vrvel15=rollapply(var_rad_vel,15,median,align='center',fill=NA),
                              vrvel30=rollapply(var_rad_vel,30,median,align='center',fill=NA),
                              vrvel60=rollapply(var_rad_vel,60,median,align='center',fill=NA),
                              
                              vtaccel5=rollapply(var_tan_accel,5,median,align='center',fill=NA),
                              vtaccel10=rollapply(var_tan_accel,10,median,align='center',fill=NA),
                              vtaccel15=rollapply(var_tan_accel,15,median,align='center',fill=NA),
                              vtaccel30=rollapply(var_tan_accel,30,median,align='center',fill=NA),
                              vtaccel60=rollapply(var_tan_accel,60,median,align='center',fill=NA),
                              
                              vraccel5=rollapply(var_rad_accel,5,median,align='center',fill=NA),
                              vraccel10=rollapply(var_rad_accel,10,median,align='center',fill=NA),
                              vraccel15=rollapply(var_rad_vel,15,median,align='center',fill=NA),
                              vraccel30=rollapply(var_rad_accel,30,median,align='center',fill=NA),
                              vraccel60=rollapply(var_rad_accel,60,median,align='center',fill=NA),
  ) %>%
    na.omit()
  ​
  rparam2<-rparam[,c(7:73)]
  set.seed(123)
  pred.feat <- predict(rg.feat_m, data = rparam2) #Change rgfeat to right sex
  ​
  rpred<-pred.feat$predictions
  # percent.table(rparam2$ground_truth, pred.feat$predictions)
  rparam2<-cbind(rparam,rpred=rpred)
  ​
  ​
  ​
  ###########################################################################
  ###APPEND APPROPRIATE SEX DESIGNATION (e.g. rg.feat_m/h)   #################
  rparam_mpred<-rparam2
  
  ####### Add State to new plot before rbind
  rparam_mpred= rparam_mpred %>% mutate(State = case_when(grepl('Dwell', rpred) ~ 1,
                                                          grepl('Roam', rpred) ~ 2,
                                                          grepl('Tail Chase',rpred)~3,
                                                          grepl('Fast Turn',rpred)~4
  )) 
  
  ###########################################################################
  
  ​
  ​
}




### Quick Check for Male Proportions
#Male
tabm<-as.matrix(table(rparam_mpred$rpred))
prop.table(tabm)



rg_new_result<-rbind(rparam_hpred,rparam_mpred)


### Herm Pdfr
{
  rparam<-tracks2.Pred %>% 
    filter(group=="HermPdfr") %>% dplyr::ungroup() %>% 
    dplyr::select(worm_ID,Date,timebin,group,animalNumber,plateNumber,linspeed,first_d,ang,turn,rad_vel,rad_accel,tan_vel,tan_accel,rad_accel,tan_accel,var_rad_vel,var_tan_vel,var_rad_accel,var_tan_accel) %>% 
    na.omit()
  ​
  ​
  #encode temporal dependence through centered median smoothing
  rparam=rparam %>%    mutate(ang5=rollapply(ang,5,median,align='center',fill=NA),
                              ang10=rollapply(ang,10,median,align='center',fill=NA),
                              ang15=rollapply(ang,15,median,align='center',fill=NA),
                              ang25=rollapply(ang,30,median,align='center',fill=NA),
                              ang60=rollapply(ang,60,median,align='center',fill=NA),
                              
                              accel5=rollapply(first_d,5,median,align='center',fill=NA),
                              accel10=rollapply(first_d,10,median,align='center',fill=NA),
                              accel15=rollapply(first_d,15,median,align='center',fill=NA),
                              accel30=rollapply(first_d,30,median,align='center',fill=NA),
                              accel60=rollapply(first_d,60,median,align='center',fill=NA),
                              
                              ls5=rollapply(linspeed,5,median,align='center',fill=NA),
                              ls10=rollapply(linspeed,10,median,align='center',fill=NA),
                              ls15=rollapply(linspeed,15,median,align='center',fill=NA),
                              ls30=rollapply(linspeed,30,median,align='center',fill=NA),
                              ls60=rollapply(linspeed,60,median,align='center',fill=NA),
                              
                              tvel5=rollapply(tan_vel,5,median,align='center',fill=NA),
                              tvel10=rollapply(tan_vel,10,median,align='center',fill=NA),
                              tvel15=rollapply(tan_vel,15,median,align='center',fill=NA),
                              tvel30=rollapply(tan_vel,30,median,align='center',fill=NA),
                              tvel60=rollapply(tan_vel,60,median,align='center',fill=NA),
                              
                              rvel5=rollapply(rad_vel,5,median,align='center',fill=NA),
                              rvel10=rollapply(rad_vel,10,median,align='center',fill=NA),
                              rvel15=rollapply(rad_vel,15,median,align='center',fill=NA),
                              rvel30=rollapply(rad_vel,30,median,align='center',fill=NA),
                              rvel60=rollapply(rad_vel,60,median,align='center',fill=NA),
                              
                              
                              taccel5=rollapply(tan_accel,5,median,align='center',fill=NA),
                              taccel10=rollapply(tan_accel,10,median,align='center',fill=NA),
                              taccel15=rollapply(tan_accel,15,median,align='center',fill=NA),
                              taccel30=rollapply(tan_accel,30,median,align='center',fill=NA),
                              taccel60=rollapply(tan_accel,60,median,align='center',fill=NA),
                              
                              raccel5=rollapply(rad_accel,5,median,align='center',fill=NA),
                              raccel10=rollapply(rad_accel,10,median,align='center',fill=NA),
                              raccel15=rollapply(rad_accel,15,median,align='center',fill=NA),
                              raccel30=rollapply(rad_accel,30,median,align='center',fill=NA),
                              raccel60=rollapply(rad_accel,60,median,align='center',fill=NA),
                              
                              
                              vtvel5=rollapply(var_tan_vel,5,median,align='center',fill=NA),
                              vtvel10=rollapply(var_tan_vel,10,median,align='center',fill=NA),
                              vtvel15=rollapply(var_tan_vel,15,median,align='center',fill=NA),
                              vtvel30=rollapply(var_tan_vel,30,median,align='center',fill=NA),
                              vtvel60=rollapply(var_tan_vel,60,median,align='center',fill=NA),
                              
                              vrvel5=rollapply(var_rad_vel,5,median,align='center',fill=NA),
                              vrvel10=rollapply(var_rad_vel,10,median,align='center',fill=NA),
                              vrvel15=rollapply(var_rad_vel,15,median,align='center',fill=NA),
                              vrvel30=rollapply(var_rad_vel,30,median,align='center',fill=NA),
                              vrvel60=rollapply(var_rad_vel,60,median,align='center',fill=NA),
                              
                              vtaccel5=rollapply(var_tan_accel,5,median,align='center',fill=NA),
                              vtaccel10=rollapply(var_tan_accel,10,median,align='center',fill=NA),
                              vtaccel15=rollapply(var_tan_accel,15,median,align='center',fill=NA),
                              vtaccel30=rollapply(var_tan_accel,30,median,align='center',fill=NA),
                              vtaccel60=rollapply(var_tan_accel,60,median,align='center',fill=NA),
                              
                              vraccel5=rollapply(var_rad_accel,5,median,align='center',fill=NA),
                              vraccel10=rollapply(var_rad_accel,10,median,align='center',fill=NA),
                              vraccel15=rollapply(var_rad_vel,15,median,align='center',fill=NA),
                              vraccel30=rollapply(var_rad_accel,30,median,align='center',fill=NA),
                              vraccel60=rollapply(var_rad_accel,60,median,align='center',fill=NA),
  ) %>%
    na.omit()
  ​
  rparam2<-rparam[,c(7:73)]
  set.seed(123)
  pred.feat <- predict(rg.feat_h, data = rparam2) #Change rgfeat to right sex
  ​
  rpred<-pred.feat$predictions
  # percent.table(rparam2$ground_truth, pred.feat$predictions)
  rparam2<-cbind(rparam,rpred=rpred)
  ​
  ​
  ​
  ###########################################################################
  ###APPEND APPROPRIATE SEX DESIGNATION (e.g. rg.feat_m/h)   #################
  rparam_hpdfr<-rparam2
  
  ####### Add State to new plot before rbind
  rparam_hpdfr= rparam_hpdfr %>% mutate(State = case_when(grepl('Dwell', rpred) ~ 1,
                                                          grepl('Roam', rpred) ~ 2,
                                                          grepl('Tail Chase',rpred)~3,
                                                          grepl('Fast Turn',rpred)~4
  )) 
  
  ###########################################################################
  
  ​
  ​
}


#### Quick Check on RF Prediction####
tabhpdfr<-as.matrix(table(rparam_hpdfr$rpred))
prop.table(tabhpdfr)

### Herm Tph
{
  rparam<-tracks2.Pred %>% 
    filter(group=="HermTph") %>% dplyr::ungroup() %>% 
    dplyr::select(worm_ID,Date,timebin,group,animalNumber,plateNumber,linspeed,first_d,ang,turn,rad_vel,rad_accel,tan_vel,tan_accel,rad_accel,tan_accel,var_rad_vel,var_tan_vel,var_rad_accel,var_tan_accel) %>% 
    na.omit()
  ​
  ​
  #encode temporal dependence through centered median smoothing
  rparam=rparam %>%    mutate(ang5=rollapply(ang,5,median,align='center',fill=NA),
                              ang10=rollapply(ang,10,median,align='center',fill=NA),
                              ang15=rollapply(ang,15,median,align='center',fill=NA),
                              ang25=rollapply(ang,30,median,align='center',fill=NA),
                              ang60=rollapply(ang,60,median,align='center',fill=NA),
                              
                              accel5=rollapply(first_d,5,median,align='center',fill=NA),
                              accel10=rollapply(first_d,10,median,align='center',fill=NA),
                              accel15=rollapply(first_d,15,median,align='center',fill=NA),
                              accel30=rollapply(first_d,30,median,align='center',fill=NA),
                              accel60=rollapply(first_d,60,median,align='center',fill=NA),
                              
                              ls5=rollapply(linspeed,5,median,align='center',fill=NA),
                              ls10=rollapply(linspeed,10,median,align='center',fill=NA),
                              ls15=rollapply(linspeed,15,median,align='center',fill=NA),
                              ls30=rollapply(linspeed,30,median,align='center',fill=NA),
                              ls60=rollapply(linspeed,60,median,align='center',fill=NA),
                              
                              tvel5=rollapply(tan_vel,5,median,align='center',fill=NA),
                              tvel10=rollapply(tan_vel,10,median,align='center',fill=NA),
                              tvel15=rollapply(tan_vel,15,median,align='center',fill=NA),
                              tvel30=rollapply(tan_vel,30,median,align='center',fill=NA),
                              tvel60=rollapply(tan_vel,60,median,align='center',fill=NA),
                              
                              rvel5=rollapply(rad_vel,5,median,align='center',fill=NA),
                              rvel10=rollapply(rad_vel,10,median,align='center',fill=NA),
                              rvel15=rollapply(rad_vel,15,median,align='center',fill=NA),
                              rvel30=rollapply(rad_vel,30,median,align='center',fill=NA),
                              rvel60=rollapply(rad_vel,60,median,align='center',fill=NA),
                              
                              
                              taccel5=rollapply(tan_accel,5,median,align='center',fill=NA),
                              taccel10=rollapply(tan_accel,10,median,align='center',fill=NA),
                              taccel15=rollapply(tan_accel,15,median,align='center',fill=NA),
                              taccel30=rollapply(tan_accel,30,median,align='center',fill=NA),
                              taccel60=rollapply(tan_accel,60,median,align='center',fill=NA),
                              
                              raccel5=rollapply(rad_accel,5,median,align='center',fill=NA),
                              raccel10=rollapply(rad_accel,10,median,align='center',fill=NA),
                              raccel15=rollapply(rad_accel,15,median,align='center',fill=NA),
                              raccel30=rollapply(rad_accel,30,median,align='center',fill=NA),
                              raccel60=rollapply(rad_accel,60,median,align='center',fill=NA),
                              
                              
                              vtvel5=rollapply(var_tan_vel,5,median,align='center',fill=NA),
                              vtvel10=rollapply(var_tan_vel,10,median,align='center',fill=NA),
                              vtvel15=rollapply(var_tan_vel,15,median,align='center',fill=NA),
                              vtvel30=rollapply(var_tan_vel,30,median,align='center',fill=NA),
                              vtvel60=rollapply(var_tan_vel,60,median,align='center',fill=NA),
                              
                              vrvel5=rollapply(var_rad_vel,5,median,align='center',fill=NA),
                              vrvel10=rollapply(var_rad_vel,10,median,align='center',fill=NA),
                              vrvel15=rollapply(var_rad_vel,15,median,align='center',fill=NA),
                              vrvel30=rollapply(var_rad_vel,30,median,align='center',fill=NA),
                              vrvel60=rollapply(var_rad_vel,60,median,align='center',fill=NA),
                              
                              vtaccel5=rollapply(var_tan_accel,5,median,align='center',fill=NA),
                              vtaccel10=rollapply(var_tan_accel,10,median,align='center',fill=NA),
                              vtaccel15=rollapply(var_tan_accel,15,median,align='center',fill=NA),
                              vtaccel30=rollapply(var_tan_accel,30,median,align='center',fill=NA),
                              vtaccel60=rollapply(var_tan_accel,60,median,align='center',fill=NA),
                              
                              vraccel5=rollapply(var_rad_accel,5,median,align='center',fill=NA),
                              vraccel10=rollapply(var_rad_accel,10,median,align='center',fill=NA),
                              vraccel15=rollapply(var_rad_vel,15,median,align='center',fill=NA),
                              vraccel30=rollapply(var_rad_accel,30,median,align='center',fill=NA),
                              vraccel60=rollapply(var_rad_accel,60,median,align='center',fill=NA),
  ) %>%
    na.omit()
  ​
  rparam2<-rparam[,c(7:73)]
  set.seed(123)
  pred.feat <- predict(rg.feat_h, data = rparam2) #Change rgfeat to right sex
  ​
  rpred<-pred.feat$predictions
  # percent.table(rparam2$ground_truth, pred.feat$predictions)
  rparam2<-cbind(rparam,rpred=rpred)
  ​
  ​
  ​
  ###########################################################################
  ###APPEND APPROPRIATE SEX DESIGNATION (e.g. rg.feat_m/h)   #################
  rparam_htph<-rparam2
  
  ####### Add State to new plot before rbind
  rparam_htph= rparam_htph %>% mutate(State = case_when(grepl('Dwell', rpred) ~ 1,
                                                          grepl('Roam', rpred) ~ 2,
                                                          grepl('Tail Chase',rpred)~3,
                                                          grepl('Fast Turn',rpred)~4
  )) 
  
  ###########################################################################
  
  ​
  ​
}


#### Quick Check on RF Prediction####
tabhtph<-as.matrix(table(rparam_htph$rpred))
prop.table(tabhtph)


### Male Nervous Fem
{
  rparam<-tracks2.Pred %>% 
    filter(group=="MaleFem") %>% dplyr::ungroup() %>% 
    dplyr::select(worm_ID,Date,timebin,group,animalNumber,plateNumber,linspeed,first_d,ang,turn,rad_vel,rad_accel,tan_vel,tan_accel,rad_accel,tan_accel,var_rad_vel,var_tan_vel,var_rad_accel,var_tan_accel) %>% 
    na.omit()
  ​
  ​
  #encode temporal dependence through centered median smoothing
  rparam=rparam %>%    mutate(ang5=rollapply(ang,5,median,align='center',fill=NA),
                              ang10=rollapply(ang,10,median,align='center',fill=NA),
                              ang15=rollapply(ang,15,median,align='center',fill=NA),
                              ang25=rollapply(ang,30,median,align='center',fill=NA),
                              ang60=rollapply(ang,60,median,align='center',fill=NA),
                              
                              accel5=rollapply(first_d,5,median,align='center',fill=NA),
                              accel10=rollapply(first_d,10,median,align='center',fill=NA),
                              accel15=rollapply(first_d,15,median,align='center',fill=NA),
                              accel30=rollapply(first_d,30,median,align='center',fill=NA),
                              accel60=rollapply(first_d,60,median,align='center',fill=NA),
                              
                              ls5=rollapply(linspeed,5,median,align='center',fill=NA),
                              ls10=rollapply(linspeed,10,median,align='center',fill=NA),
                              ls15=rollapply(linspeed,15,median,align='center',fill=NA),
                              ls30=rollapply(linspeed,30,median,align='center',fill=NA),
                              ls60=rollapply(linspeed,60,median,align='center',fill=NA),
                              
                              tvel5=rollapply(tan_vel,5,median,align='center',fill=NA),
                              tvel10=rollapply(tan_vel,10,median,align='center',fill=NA),
                              tvel15=rollapply(tan_vel,15,median,align='center',fill=NA),
                              tvel30=rollapply(tan_vel,30,median,align='center',fill=NA),
                              tvel60=rollapply(tan_vel,60,median,align='center',fill=NA),
                              
                              rvel5=rollapply(rad_vel,5,median,align='center',fill=NA),
                              rvel10=rollapply(rad_vel,10,median,align='center',fill=NA),
                              rvel15=rollapply(rad_vel,15,median,align='center',fill=NA),
                              rvel30=rollapply(rad_vel,30,median,align='center',fill=NA),
                              rvel60=rollapply(rad_vel,60,median,align='center',fill=NA),
                              
                              
                              taccel5=rollapply(tan_accel,5,median,align='center',fill=NA),
                              taccel10=rollapply(tan_accel,10,median,align='center',fill=NA),
                              taccel15=rollapply(tan_accel,15,median,align='center',fill=NA),
                              taccel30=rollapply(tan_accel,30,median,align='center',fill=NA),
                              taccel60=rollapply(tan_accel,60,median,align='center',fill=NA),
                              
                              raccel5=rollapply(rad_accel,5,median,align='center',fill=NA),
                              raccel10=rollapply(rad_accel,10,median,align='center',fill=NA),
                              raccel15=rollapply(rad_accel,15,median,align='center',fill=NA),
                              raccel30=rollapply(rad_accel,30,median,align='center',fill=NA),
                              raccel60=rollapply(rad_accel,60,median,align='center',fill=NA),
                              
                              
                              vtvel5=rollapply(var_tan_vel,5,median,align='center',fill=NA),
                              vtvel10=rollapply(var_tan_vel,10,median,align='center',fill=NA),
                              vtvel15=rollapply(var_tan_vel,15,median,align='center',fill=NA),
                              vtvel30=rollapply(var_tan_vel,30,median,align='center',fill=NA),
                              vtvel60=rollapply(var_tan_vel,60,median,align='center',fill=NA),
                              
                              vrvel5=rollapply(var_rad_vel,5,median,align='center',fill=NA),
                              vrvel10=rollapply(var_rad_vel,10,median,align='center',fill=NA),
                              vrvel15=rollapply(var_rad_vel,15,median,align='center',fill=NA),
                              vrvel30=rollapply(var_rad_vel,30,median,align='center',fill=NA),
                              vrvel60=rollapply(var_rad_vel,60,median,align='center',fill=NA),
                              
                              vtaccel5=rollapply(var_tan_accel,5,median,align='center',fill=NA),
                              vtaccel10=rollapply(var_tan_accel,10,median,align='center',fill=NA),
                              vtaccel15=rollapply(var_tan_accel,15,median,align='center',fill=NA),
                              vtaccel30=rollapply(var_tan_accel,30,median,align='center',fill=NA),
                              vtaccel60=rollapply(var_tan_accel,60,median,align='center',fill=NA),
                              
                              vraccel5=rollapply(var_rad_accel,5,median,align='center',fill=NA),
                              vraccel10=rollapply(var_rad_accel,10,median,align='center',fill=NA),
                              vraccel15=rollapply(var_rad_vel,15,median,align='center',fill=NA),
                              vraccel30=rollapply(var_rad_accel,30,median,align='center',fill=NA),
                              vraccel60=rollapply(var_rad_accel,60,median,align='center',fill=NA),
  ) %>%
    na.omit()
  ​
  rparam2<-rparam[,c(7:73)]
  set.seed(123)
  pred.feat <- predict(rg.feat_h, data = rparam2) #Change rgfeat to right sex
  ​
  rpred<-pred.feat$predictions
  # percent.table(rparam2$ground_truth, pred.feat$predictions)
  rparam2<-cbind(rparam,rpred=rpred)
  ​
  ​
  ​
  ###########################################################################
  ###APPEND APPROPRIATE SEX DESIGNATION (e.g. rg.feat_m/h)   #################
  rparam_mfem<-rparam2
  
  ####### Add State to new plot before rbind
  rparam_mfem= rparam_mfem %>% mutate(State = case_when(grepl('Dwell', rpred) ~ 1,
                                                        grepl('Roam', rpred) ~ 2,
                                                        grepl('Tail Chase',rpred)~3,
                                                        grepl('Fast Turn',rpred)~4
  )) 
  
  ###########################################################################
  
  ​
  ​
}


#### Quick Check on RF Prediction####
tabmfem<-as.matrix(table(rparam_mfem$rpred))
prop.table(tabmfem)


####### Plot GT vs RF Prediction

###Herm

butts=rparam_h %>% filter(worm_ID=='3.Herm3SF_21-11-12.')

p.AV.H<- ggplot(RF.m3.plot, aes(x=`timebin`,y=`ang`))+
  geom_line()+
  expand_limits(x = c(0, 90), y = c(0, 0.25))+
  xlab('Time')+
  ylab('Angular Velocity (ang/s)')+
  theme(plot.title = element_text(hjust = 0.5))

p.LV.H<-ggplot(rparam_h %>% filter(worm_ID=='3.Herm3SF_21-11-12.'), aes(x=`timebin`,y=`linspeed`))+
  geom_line()+
  expand_limits(x = c(0, 90), y = c(0, 0.25))+
  xlab('Time')+
  ylab('Linear Velocity (mm/s)')+
  theme(plot.title = element_text(hjust = 0.5))

p.State.H<-ggplot(rparam_h %>% filter(worm_ID=='3.Herm3SF_21-11-12.'), aes(x=`timebin`,y=`rpred`))+
  geom_line()+
  expand_limits(x = c(0, 90), y = c(1,2))+
  xlab('Time')+
  ylab('RF State')+
  theme(plot.title = element_text(hjust = 0.5))

p.GT.H<-ggplot(rparam_h %>% filter(worm_ID=='3.Herm3SF_21-11-12.'), aes(x=`timebin`,y=`ground_truth`))+
  geom_line()+
  expand_limits(x = c(0, 90), y = c(1,2))+
  xlab('Time')+
  ylab('Ground Truth')+
  theme(plot.title = element_text(hjust = 0.5))

ggarrange(p.LV.H,p.AV.H,p.State.H,p.GT.H, nrow = 4, common.legend = TRUE, legend = 'right', heights = c(10, 10))

###### Export Proportion of Time in Each State
#By animal
tracks.class.animal=track_fit_ALL_LS %>% group_by(Date,group,plateNumber,animalNumber,Loco.State) %>% tally() %>% ungroup() %>% 
  group_by(Date,group,plateNumber,animalNumber) %>% mutate(total=sum(`n`)) %>% mutate(Percent.RD=`n`/total)

tracks.class.R.animal= tracks.class.animal %>% filter(Loco.State=='Roaming') %>% dplyr::select(Percent.RD) %>%
  as.data.frame()

tracks.ex.R.animal=as.data.frame(tracks.class.R.animal)


######## Graphs for results 

plot2<-tracks.GT.RF %>% dplyr::filter(worm_ID=='1./Male1SF_22-11-12.')
frames<- length(plot2$timebin)
p<-ggplot(plot2, aes(timebin, linspeed,group= animalNumber,color=as.factor(`Eye L.State`)))+
  geom_line(size=1.5)+
  ylim(0.0,0.3)+
  scale_color_manual(values = c("1" = "#5757F9",
                                "2"= "#F94040",
                                "3"="#05BE78"))+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  theme(panel.background = element_blank())+
  # facet_wrap(~plateNumber+animalNumber,scales = "free_y")+
  transition_reveal(timebin, keep_last = TRUE) +
  labs(title = 'timebin: {frame_along}') +
  exit_fade()

p2<- ggplot(plot2,aes(x,y,group=animalNumber,color=as.factor(`ground_truth`)))+
  geom_line(size=1.75) +
  # geom_segment(aes(xend=max(x), yend = y), linetype=2)+
  geom_point(size=5) +
  scale_color_manual(name='Locomotor State',values =c("Dwell" = "#5757F9",
                               "Roam"= "#F94040",
                               "Tail Chase"="#05BE78"))+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  theme(panel.background = element_blank())+
  theme(axis.line = element_line(colour = "black"))+
  scale_fill_discrete(name='Locomotor State')+
  #scale_color_discrete(name='Locomotor State')+
  # scale_y_continuous(limits = c(0,2.748))+
  # scale_x_continuous(limits = c(0,3.84))+
  transition_reveal(timebin, keep_last = FALSE) +
  # transition_components(timebin, exit_length = 25)+
  # labs(title = 'timebin: {frame_along}') +
  exit_fade()


gif_vel<-animate(p, renderer = magick_renderer(),nframes=200) 
gif_path<-animate(p2, renderer = magick_renderer(),nframes =200)
gif_path
gif_vel

new_gif<-image_append(c(gif_vel[1], gif_path[1]), stack = TRUE)
l<-length(gif_vel)
for(i in 1:l){
  combined <- image_append(c(gif_vel[i], gif_path[i]), stack = TRUE)
  new_gif <- c(new_gif, combined)
}
new_gif

anim_save("Male WT",gif_path, path="/Users/GregsStuff/Desktop/")
